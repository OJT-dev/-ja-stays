# .clinerules — JA Stays Project

Below are **project-specific guidelines** that tailor Cline's behavior and operations for the JA Stays project. Place this file in the **root** of your repository. Cline will reference it to maintain consistency, clarity, and best practices throughout the development lifecycle.

---

## 1. Code Conventions

- **Primary Language**: TypeScript  
- **Style Guide**: [Airbnb JavaScript/TypeScript Style Guide](https://github.com/airbnb/javascript)  
- **Linting/Formatting**: Use ESLint + Prettier integrations aligned with Airbnb rules  
- **Indentation**: 2 spaces  
- **Line Length**: 100 characters max  

**Additional Notes**:  

- Prefer named exports over default exports where possible.  
- Use descriptive function and variable names that reflect Jamaican or domain context (e.g., `montegoBayListings()`).  
- Follow Java naming conventions for Android files (PascalCase for classes).

---

## 2. Project Structure

```
ja-stays/
├─ src/                  # Web source code
│  ├─ api/              # Back-end logic
│  ├─ components/       # React components
│  ├─ lib/             # Helper libraries
│  ├─ models/          # Data models
│  ├─ services/        # Business logic
│  └─ index.ts         # Main entry
├─ android/            # Android app
│  ├─ app/            # Android application
│  │  ├─ src/        # Android source
│  │  └─ res/        # Android resources
│  └─ gradle/         # Gradle config
├─ tests/             # Test files
├─ dist/              # Build output
├─ docs/              # Documentation
└─ .clinerules        # This file
```

- **Source Directory**: `src/` for web code, `android/` for mobile code.
- **Tests Directory**: `tests/`; subfolders for unit, integration, and e2e tests.
- **Build Output**: `dist/` for web, `android/app/build/` for mobile.

---

## 3. Documentation

- **Documentation Format**: JSDoc (for TypeScript, TSDoc-style comments are acceptable)  
- **Location**: Place high-level project docs in `docs/`
- **In-Code Comments**: Provide explanatory comments for complex logic
- **Mobile Documentation**: Document Android configurations and WebView features

---

## 4. Testing

- **Test Framework**: Jest  
- **Coverage**: Strive for **90%+** coverage across statements, branches, and functions  
- **Naming Convention**: `*.test.ts` or `*.spec.ts`  
- **Test Organization**:  
  - **Unit Tests**: In `tests/unit/` or alongside modules
  - **Integration Tests**: In dedicated `tests/e2e/` directory
  - **Mobile Tests**: Android tests in respective Android test directories

---

## 5. Build & Deployment

- **Package Manager**: npm  
- **Node Version**: `>= 16.x`  
- **Build Scripts**:  
  - `npm run build`: Compile TypeScript and sync with Android
  - `npm run dev`: Start local dev server
- **Mobile Build**:
  - Use Android Studio for mobile builds
  - Follow Capacitor configuration guidelines
  - Maintain proper WebView settings

---

## 6. AI & Data Guidelines

- **AI Modules**:  
  - Keep AI code in `src/services/ai/`
  - Document models in `docs/ai/`
- **Data Privacy**:  
  - Follow privacy laws
  - Secure sensitive data
  - Handle mobile data securely

---

## 7. Mobile Development

- **Framework**: Capacitor
- **Platform**: Android (primary)
- **WebView Configuration**:
  - Use modern WebView features
  - Enable hardware acceleration
  - Configure proper caching
  - Handle file access securely
- **Image Handling**:
  - Use Glide for efficient loading
  - Configure proper caching
  - Handle offline images
- **Performance**:
  - Enable hardware acceleration
  - Optimize WebView settings
  - Handle offline capabilities

---

## 8. Additional Notes

1. **Commit Messages**:  
   - Use concise messages (e.g., `[feat] Add dynamic pricing`)
   - Reference issues (`#123` or `[JASTAYS-45]`)
2. **Dependencies**:  
   - Keep updated
   - Use well-maintained libraries
3. **Localization**:  
   - Jamaican English default
   - Plan for expansion
4. **Performance**:  
   - Cache frequently accessed data
   - Use lazy loading
   - Optimize for mobile

---

**Placement**: Put this file at the **root** of the `ja-stays` project. Following these guidelines ensures consistency across web and mobile development.
